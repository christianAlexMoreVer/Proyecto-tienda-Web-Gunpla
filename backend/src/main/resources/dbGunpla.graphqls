type Gunpla {
	idMaqueta: ID!
	nombre: String!
	precio: Int!
	escala: String
	tipoGrado: String
	breveIntro: String
	descripcion: String
	imgFileName: String
}

type Pedido{
	idPedido: ID!
	idUsuarioPedido: Int!
	idMaqueta: Int!
}

type Usuario{
	idUsuario: ID!
	nombre: String!
	apellidos: String!
	contrasena: String!
	correoElectronico: String!
	admin: Int!
}

type Query {
	gunplas: [Gunpla],
	gunpla(id: ID): Gunpla,
	gunplaByName(nombre: String): [Gunpla],
	pedidos: [Pedido],
	pedido(id: ID): Pedido,
	usuarios: [Usuario],
	usuario(id: ID): Usuario,
	usuarioGetCorreo(correoElectronico: String): Usuario
	usuarioExist(correoElectronico: String): Boolean
	usuarioLogged(correoElectronico: String, contrasena: String): Usuario
}

type Mutation {
	createGunpla(nombre: String, precio: Int, escala: String, tipoGrado: String, breveIntro: String, descripcion: String): Gunpla
	createUsuario(nombre: String, apellidos: String, contrasena: String, correoElectronico: String): Usuario
	createPedido(idUsuarioPedido: Int, idMaqueta: Int): Pedido
	updateGunpla(idMaqueta: ID, nombre: String, precio: Int, escala: String, tipoGrado: String, breveIntro: String, descripcion: String): Gunpla
	updateUsuario(idUsuario: ID, nombre: String, apellidos: String, contrasena: String, correoElectronico: String): Usuario
	updatePedido(idPedido: ID, idUsuarioPedido: Int, idMaqueta: Int): Pedido
	deleteGunpla(idMaqueta: ID): String
	deleteUsuario(idUsuario: ID): String
	deletePedido(idPedido: ID): String
}